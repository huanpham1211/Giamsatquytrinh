import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from docx import Document
from docx.shared import Inches, Pt
from docx.oxml import OxmlElement
from docx.shared import RGBColor
from docx.oxml.ns import qn  # Import the namespace
from io import BytesIO
import datetime
import re

st.set_page_config(page_title="B√°o c√°o gi√°m s√°t", page_icon="üë®‚Äç‚öïÔ∏è")


def normalize_text(text):
    if isinstance(text, str):
        return text.strip().lower().replace("ƒëaÃ£t", "ƒë·∫°t").replace("coÃÅ", "c√≥")
    return text

def process_excel(file):
    df = pd.read_excel(file)
    df = df.applymap(normalize_text)

    # Identify relevant columns
    standard_columns = df.columns[:11].tolist()
    step_columns = [col for col in df.columns if col not in standard_columns][:-1]
    
    # Extract rows where "Nh·∫≠n x√©t" is not "ƒê·∫°t"
    non_d·∫°t_comments = df[df["Nh√¢Ã£n xeÃÅt:"].str.lower() != "ƒë·∫°t"][["ƒêi√™ÃÄu d∆∞∆°ÃÉng th∆∞Ã£c hi√™Ã£n", "Khoa ƒëaÃÅnh giaÃÅ", "Nh√¢Ã£n xeÃÅt:"]]
    
    # Calculate "ƒê·∫°t" (from step columns) and "C√≥" (from compliance columns)
    compliance_percent = df.groupby("Khoa ƒëaÃÅnh giaÃÅ")[df.columns[5:11]].apply(lambda x: (x == "c√≥").mean() * 100)
    step_percent = df.groupby("Khoa ƒëaÃÅnh giaÃÅ")[step_columns].apply(lambda x: (x == "ƒë·∫°t").mean() * 100)

    # Compute the overall mean percentage for "C√≥" and "ƒê·∫°t" per department
    dept_report = pd.concat([compliance_percent.mean(axis=1), step_percent.mean(axis=1)], axis=1)
    dept_report.columns = ["X√°c th·ª±c ng∆∞·ªùi b·ªánh(%)", "B·∫£ng ki·ªÉm(%)"]  # Ensure exactly two columns

    # Step summary (Percentage of "ƒê·∫°t")
    step_summary = df[step_columns].apply(lambda x: (x == "ƒë·∫°t").mean() * 100).round(1)

    # Success distribution
    df["SuccessRate"] = df[step_columns].apply(lambda row: (row == "ƒë·∫°t").mean() * 100, axis=1).round(1)
    success_distribution = pd.Series({
        "> 90% T·ªët": (df["SuccessRate"] > 90).mean() * 100,
        "70-90% Kh√°": ((df["SuccessRate"] > 70) & (df["SuccessRate"] <= 90)).mean() * 100,
        "50-70% Trung b√¨nh": ((df["SuccessRate"] > 50) & (df["SuccessRate"] <= 70)).mean() * 100,
        "< 50% K√©m": (df["SuccessRate"] <= 50).mean() * 100
    })

    # Identify top 5 mistakes
    total_records = len(df)
    compliance_mistakes_percentage = df.iloc[:, 5:11].apply(lambda x: (x != "c√≥").mean() * 100)
    step_mistakes_percentage = df[step_columns].apply(lambda x: (x != "ƒë·∫°t").mean() * 100)

    # Combine both mistake percentages and select top 5
    mistake_percentages = pd.concat([compliance_mistakes_percentage, step_mistakes_percentage])
    top_5_mistakes_percentage = mistake_percentages.nlargest(5)

    return step_summary, success_distribution, dept_report, top_5_mistakes_percentage, total_records


def format_header_text(cell, text):
    paragraph = cell.paragraphs[0]
    paragraph.alignment = 1  # Center align text
    run = paragraph.add_run(text)
    run.bold = True
    run.font.size = Pt(13)  # Adjust size if needed

def add_heading(doc, text):
    paragraph = doc.add_paragraph("\n" + text)
    run = paragraph.runs[0]
    run.bold = True
    run.font.name = "Times New Roman"
    run.font.color.rgb = RGBColor(0, 0, 0)  # Set text color to black
    run.font.size = Pt(13)  # Adjust heading size if needed
    paragraph.alignment = 0  # Align to left (default)

def generate_word_report_with_charts(step_summary, success_distribution, dept_report, top_5_mistakes_percentage, total_records, non_d·∫°t_comments):
    doc = Document()
    style = doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(13)

    # Header
    header_table = doc.add_table(rows=1, cols=2)
    hdr_cells = header_table.rows[0].cells
    format_header_text(hdr_cells[0], "B·ªÜNH VI·ªÜN H√ôNG V∆Ø∆†NG\nPH√íNG ƒêI·ªÄU D∆Ø·ª†NG\nS·ªë:    /BC-PƒêD")
    format_header_text(hdr_cells[1], "C·ªông h√≤a x√£ h·ªôi ch·ªß nghƒ©a Vi·ªát Nam\nƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh Ph√∫c")

    add_heading(doc, "I. TH√îNG TIN CHUNG:")
    doc.add_paragraph("- Th·ªùi gian gi√°m s√°t: ____________________________")
    doc.add_paragraph("- S·ªë l∆∞·ª£t h·ªì s∆° ki·ªÉm tra: ________________________")
    doc.add_paragraph("- S·ªë l∆∞·ª£t gi√°m s√°t quy tr√¨nh: ____________________")
    add_heading(doc, "II. K·∫æT QU·∫¢ GI√ÅM S√ÅT:")

    # **1st Chart: T·ª∑ l·ªá ƒë·∫°t t·ª´ng b∆∞·ªõc (Horizontal Bar Chart with Correct Step Extraction)**
    fig, ax = plt.subplots(figsize=(6, 4))
    colors = sns.color_palette("husl", len(step_summary))
    bars = step_summary.sort_values().plot(kind="barh", ax=ax, color=colors)
    
    # Extract dynamic labels (B∆∞·ªõc X)
    extracted_labels = [re.search(r"B∆∞·ªõc \d+", col) for col in step_summary.index]
    extracted_labels = [match.group(0) if match else col for match in extracted_labels]
    
    ax.set_yticks(range(len(step_summary)))
    ax.set_yticklabels(extracted_labels, fontsize=10)
    ax.set_xlabel("T·ª∑ l·ªá (%)")
    ax.set_ylabel("B∆∞·ªõc")
    ax.set_title("Bi·ªÉu ƒë·ªì: T·ª∑ l·ªá ƒë·∫°t t·ª´ng b∆∞·ªõc")
    
    # Remove legend & add labels inside bars
    ax.legend().remove()
    for bar, label in zip(bars.patches, extracted_labels):
        width = bar.get_width()
        ax.text(width + 1, bar.get_y() + bar.get_height()/2, f"{width:.1f}%", 
                ha="left", va="center", fontsize=10, color="black")
    
    img_chart1 = BytesIO()
    plt.savefig(img_chart1, format="png", bbox_inches="tight")
    img_chart1.seek(0)
    doc.add_paragraph("\nBi·ªÉu ƒë·ªì: T·ª∑ l·ªá ƒë·∫°t t·ª´ng b∆∞·ªõc\n", style='Heading 3')
    doc.add_picture(img_chart1, width=Inches(6))
    
    # **1st Table: Percentage of B∆∞·ªõc ƒë·∫°t**
    doc.add_paragraph("\nB·∫£ng: Percentage of B∆∞·ªõc ƒë·∫°t\n", style='Heading 3')
    table = doc.add_table(rows=len(step_summary) + 1, cols=2)
    table.cell(0, 0).text = "B∆∞·ªõc"
    table.cell(0, 1).text = "T·ª∑ l·ªá (%)"
    
    for key, value in zip(extracted_labels, step_summary.sort_values().values):
        row_cells = table.add_row().cells
        row_cells[0].text = str(key)
        row_cells[1].text = f"{value:.1f}%"



    # **2nd Chart: Ph√¢n b·ªë nh√¢n vi√™n ƒë·∫°t ti√™u chu·∫©n**
    fig, ax = plt.subplots(figsize=(6, 4))
    success_distribution.plot.pie(autopct="%1.1f%%", ax=ax, startangle=90, colors=sns.color_palette("pastel"))
    ax.set_ylabel("")
    ax.set_title("Bi·ªÉu ƒë·ªì: Ph√¢n b·ªë nh√¢n vi√™n ƒë·∫°t ti√™u chu·∫©n")

    img_chart2 = BytesIO()
    plt.savefig(img_chart2, format="png", bbox_inches="tight")
    img_chart2.seek(0)
    doc.add_paragraph("\nBi·ªÉu ƒë·ªì: Ph√¢n b·ªë nh√¢n vi√™n ƒë·∫°t ti√™u chu·∫©n\n", style='Heading 3')
    doc.add_picture(img_chart2, width=Inches(6))

    # **2nd Table: Percentage of Success Rate**
    doc.add_paragraph("\nB·∫£ng: Ph·∫ßn trƒÉm nh√¢n vi√™n ƒë·∫°t ti√™u chu·∫©n\n", style='Heading 3')
    table = doc.add_table(rows=len(success_distribution) + 1, cols=2)
    table.cell(0, 0).text = "H·∫°ng m·ª•c"
    table.cell(0, 1).text = "T·ª∑ l·ªá (%)"

    for key, value in success_distribution.items():
        row_cells = table.add_row().cells
        row_cells[0].text = str(key)
        row_cells[1].text = f"{value:.1f}%"

    # **3rd Chart: T·ª∑ l·ªá ƒë·∫°t theo khoa (With percentage labels on bars)**
    fig, ax = plt.subplots(figsize=(8, 5))
    dept_report.plot(kind='bar', ax=ax, color=['#1f77b4', '#ff7f0e'])
    
    ax.set_title("Bi·ªÉu ƒë·ªì: T·ª∑ l·ªá ƒë·∫°t theo khoa")
    ax.set_xlabel("Khoa ƒë√°nh gi√°")
    ax.set_ylabel("T·ª∑ l·ªá (%)")
    ax.set_xticklabels(dept_report.index, rotation=45, ha="right")
    
    # Add percentage labels on bars
    for bar in ax.patches:
        height = bar.get_height()
        if height > 0:
            ax.text(bar.get_x() + bar.get_width()/2, height + 1, f"{height:.1f}%", 
                    ha="center", fontsize=10, color="black")
    
    img_chart3 = BytesIO()
    plt.savefig(img_chart3, format="png", bbox_inches="tight")
    img_chart3.seek(0)
    doc.add_paragraph("\nBi·ªÉu ƒë·ªì: T·ª∑ l·ªá ƒë·∫°t theo khoa\n", style='Heading 3')
    doc.add_picture(img_chart3, width=Inches(6))

    # **4th Chart: Top 5 Common Mistakes**
    fig, ax = plt.subplots(figsize=(6, 4))
    sns.barplot(y=top_5_mistakes_percentage.index, x=top_5_mistakes_percentage.values, ax=ax, color="red")

    ax.set_xlabel("T·ª∑ l·ªá (%)")
    ax.set_title("Bi·ªÉu ƒë·ªì: Top 5 Sai s√≥t ph·ªï bi·∫øn nh·∫•t")

    # Add percentage labels on bars
    for bar in ax.patches:
        ax.text(bar.get_width() + 1, bar.get_y() + bar.get_height()/2, f"{bar.get_width():.1f}%", 
                ha="left", va="center", fontsize=10, color="black")

    # Save the chart
    img_chart4 = BytesIO()
    plt.savefig(img_chart4, format="png", bbox_inches="tight")
    img_chart4.seek(0)

    # Add chart to Word document
    doc.add_paragraph("\nBi·ªÉu ƒë·ªì: Top 5 Sai s√≥t ph·ªï bi·∫øn nh·∫•t\n", style='Heading 3')
    doc.add_picture(img_chart4, width=Inches(6))

    # **4th Table: Top 5 Common Mistakes**
    doc.add_paragraph("\nB·∫£ng: Top 5 Sai s√≥t ph·ªï bi·∫øn nh·∫•t\n", style='Heading 3')
    table = doc.add_table(rows=len(top_5_mistakes_percentage) + 1, cols=2)
    table.cell(0, 0).text = "H·∫°ng m·ª•c"
    table.cell(0, 1).text = "T·ª∑ l·ªá (%)"

    for key, value in top_5_mistakes_percentage.items():
        row_cells = table.add_row().cells
        row_cells[0].text = str(key)
        row_cells[1].text = f"{value:.1f}%"

    # **Finalization**
    # Add formatted headings
    add_heading(doc, "III. ƒê√ÅNH GI√Å V√Ä NH·∫¨N X√âT:")
    doc.add_paragraph("- ƒêi·ªÉm m·∫°nh:\n\n- ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán:\n")

    # Add extracted non-ƒê·∫°t comments
    doc.add_paragraph("\nC√°c tr∆∞·ªùng h·ª£p ch∆∞a ƒë·∫°t:")
    for index, row in non_d·∫°t_comments.iterrows():
        doc.add_paragraph(f"- {row['ƒêi√™ÃÄu d∆∞∆°ÃÉng th∆∞Ã£c hi√™Ã£n']} ({row['Khoa ƒëaÃÅnh giaÃÅ']}): {row['Nh√¢Ã£n xeÃÅt:']}", style='List Bullet')

    add_heading(doc, "IV. K·∫æT LU·∫¨N:")
    doc.add_paragraph("- T√≥m t·∫Øt t√¨nh h√¨nh:\n")

    add_heading(doc, "V. ƒê·ªÄ XU·∫§T:")
    doc.add_paragraph("- Nh·∫Øc nh·ªü nh√¢n vi√™n y t·∫ø:\n- Ki·ªÉm tra ƒë·ªãnh k·ª≥:\n- Ph·ªëi h·ª£p c√°c khoa:\n")

    add_heading(doc, "VI. PH∆Ø∆†NG H∆Ø·ªöNG:")
    doc.add_paragraph("Ti·∫øp t·ª•c ki·ªÉm tra, gi√°m s√°t h·ªì s∆° b·ªánh √°n, ph√°t hi·ªán c√°c thi·∫øu s√≥t...")
    
    
    # **Finalization (Right-Aligned Date & "Ng∆∞·ªùi b√°o c√°o")**


    # **Finalization (Right-Aligned, Two-Column Table)**
    final_table = doc.add_table(rows=1, cols=2)

    # Set column widths: First column (2x width), Second column (1x width)
    final_table.columns[0].width = Inches(4)
    final_table.columns[1].width = Inches(2)

    # First column (empty space)
    final_table.rows[0].cells[0].text = ""

    # Second column (Date + "Ng∆∞·ªùi b√°o c√°o")
    final_cell = final_table.rows[0].cells[1]
    paragraph = final_cell.paragraphs[0]
    paragraph.alignment = 1  # Center text inside the second column

    # Add formatted text
    paragraph.add_run("\nNg√†y {} th√°ng {} nƒÉm {}\n".format(datetime.datetime.now().day, 
                                                           datetime.datetime.now().month, 
                                                           datetime.datetime.now().year)).bold = True
    paragraph.add_run("Ng∆∞·ªùi b√°o c√°o").bold = True

    # Center vertically (adjust cell properties)
    # Center vertically (adjust cell properties)
    tbl = final_table._element
    tbl.set("alignment", "right")  # Ensure the whole table is right-aligned

    for cell in final_table.columns[1].cells:
        tc = cell._element
        tcPr = OxmlElement('w:tcPr')
        vAlign = OxmlElement('w:vAlign')
        vAlign.set(qn('w:val'), "center")  # Use qn() to ensure namespace is correct
        tcPr.append(vAlign)
        tc.append(tcPr)



    # Save document to buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)

    return buffer


# ---- Streamlit UI ----
st.title("üìä B√°o c√°o t√≥m t·∫Øt Gi√°m s√°t ƒëi·ªÅu d∆∞·ª°ng & Th·ª±c hi·ªán Quy tr√¨nh")

# File uploader
uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n file Excel", type=["xlsx"])

if uploaded_file:
    step_summary, success_distribution, dept_report, top_5_mistakes, total_records = process_excel(uploaded_file)  # Unpacking 5 values

    # Generate Word report
    word_buffer = generate_word_report_with_charts(step_summary, success_distribution, dept_report, top_5_mistakes, total_records)

    # Provide download button
    st.download_button(
        label="üì• T·∫£i xu·ªëng b√°o c√°o",
        data=word_buffer,
        file_name="BaoCao_GiamSatDieuDuong.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

    st.success("‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

